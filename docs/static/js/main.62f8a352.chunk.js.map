{"version":3,"sources":["components/searchBar.js","services/services.js","config/config.js","hooks/useFetchGifs.js","components/gifCard.js","components/grid.js","screens/home.js","index.js"],"names":["Searchbar","addCategory","useState","text","setText","onSubmit","e","preventDefault","trim","length","cat","type","onChange","target","value","placeholder","Services","fetchGifs","category","a","URL","fetch","response","json","data","map","gifData","id","title","image","images","downsized_medium","url","useFetchGifs","loading","state","setState","useEffect","then","setTimeout","GifCard","className","src","alt","Grid","key","Home","setCategory","ReactDOM","render","document","getElementById"],"mappings":"iPA6BeA,EA1BG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEbC,mBAAS,IAFI,mBAE9BC,EAF8B,KAExBC,EAFwB,KAerC,OACE,0BAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAKK,OAAOC,SACdR,GAAY,SAAAS,GAAG,OAAKP,GAAL,mBAAcO,OAC7BN,EAAQ,OAMR,2BAAOO,KAAK,OAAOC,SAbH,SAAAN,GAAOF,EAAQE,EAAEO,OAAOC,QAaIA,MAAOX,EAAMY,YAAY,qC,8BCZrEC,E,kCAAAA,EACGC,U,uCAAY,WAAMC,GAAN,qBAAAC,EAAA,6DACXC,EADW,UCNO,uCDMP,oBCTL,mCDSK,iBCPJ,KDOI,kBCRP,GDQO,cAC0EF,GAD1E,SAEMG,MAAMD,GAFZ,cAEXE,EAFW,gBAGMA,EAASC,OAHf,uBAGTC,EAHS,EAGTA,KAHS,kBAKVA,EAAKC,KAAI,SAAAC,GAAO,MAAK,CAC1BC,GAAID,EAAQC,GACZC,MAAOF,EAAQE,MACfC,MAAOH,EAAQI,OAAOC,iBAAiBC,SARxB,2C,sDAaNhB,QEIAiB,EArBM,SAAAf,GAAa,IAAD,EACLhB,mBAAS,CACjCsB,KAAM,GACNU,SAAS,IAHoB,mBACxBC,EADwB,KACjBC,EADiB,KAkB/B,OAZAC,qBAAU,WACRrB,EAASC,UAAUC,GAChBoB,MAAK,SAAAR,GACJS,YAAW,WACTH,EAAS,CACPZ,KAAMM,EACNI,SAAS,MAEV,UAEN,CAAChB,IAEGiB,GCdMK,EAPC,SAAC,GAAD,EAAGb,GAAH,IAAOC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MAAd,OACd,yBAAKY,UAAU,0CACb,yBAAKC,IAAKb,EAAOc,IAAKf,IACtB,2BAAIA,KCqBOgB,EAnBF,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEHe,EAAaf,GAA/BM,EAFqB,EAErBA,KAAMU,EAFe,EAEfA,QAEd,OACE,oCACE,4BAAKhB,GACHgB,GAAW,WACb,yBAAKO,UAAU,YAETjB,EAAKC,KAAI,SAAAI,GAAK,OACZ,kBAAC,EAAD,eAASgB,IAAKhB,EAAMF,IAAQE,UCK3BiB,EAjBF,WAAO,IAAD,EACe5C,mBAAS,CAAC,eADzB,mBACVgB,EADU,KACA6B,EADA,KAGjB,OACE,oCACA,8CACA,kBAAC,EAAD,CAAW9C,YAAa8C,IACxB,6BACA,4BAEE7B,EAASO,KAAI,SAAAf,GAAG,OAAI,kBAAC,EAAD,CAAMQ,SAAUR,EAAKmC,IAAKnC,UCVpDsC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.62f8a352.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ addCategory }) => {\n  \n  const [text, setText] = useState('');\n\n  const handleInput = e => { setText(e.target.value)};\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (text.trim().length) {\n      addCategory(cat => [text, ...cat]);\n      setText('');\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input type=\"text\" onChange={ handleInput } value={text} placeholder=\"¿Qué te gustaría ver?\"/>\n    </form>\n  )\n};\n\nSearchbar.propTypes = {\n  addCategory: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","// Configuration\nimport {\n  API_KEY,\n  SEARCH_ENDPOINT_URL,\n  LANGUAGE,\n  LIMIT,\n} from '../config/config';\n\nclass Services {\n  static fetchGifs = async category => {\n    const URL = `${SEARCH_ENDPOINT_URL}?api_key=${API_KEY}&lang=${LANGUAGE}&limit=${LIMIT}&q=${category}`;\n    const response = await fetch(URL);\n    const { data } = await response.json();\n\n    return data.map(gifData => ({\n      id: gifData.id,\n      title: gifData.title,\n      image: gifData.images.downsized_medium.url,\n    }));\n  };\n}\n\nexport default Services;\n","const API_KEY = 'bqHRdw7qZMogVNlAqieZNS0P2IQub1xw';\nconst LIMIT = 10;\nconst LANGUAGE = 'es';\nconst SEARCH_ENDPOINT_URL = 'https://api.giphy.com/v1/gifs/search';\n\nexport {\n  API_KEY,\n  SEARCH_ENDPOINT_URL,\n  LIMIT,\n  LANGUAGE,\n};","import { useState, useEffect } from 'react';\n\n// Services\nimport Services from '../services/services';\n\nconst useFetchGifs = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    Services.fetchGifs(category)\n      .then(images => {\n        setTimeout(() => {\n          setState({\n            data: images,\n            loading: false,\n          })\n        }, 2000);\n      });\n  }, [category]);\n\n  return state;\n}\n\nexport default useFetchGifs;\n","import React from 'react';\n\nconst GifCard = ({ id, title, image }) => (\n  <div className=\"card animate__animated animate__bounce\">\n    <img src={image} alt={title} />\n    <p>{title}</p>\n  </div>\n);\n\nexport default GifCard;\n","import React from 'react';\n\nimport useFetchGifs from '../hooks/useFetchGifs';\n\n// Components\nimport GifCard from './gifCard';\n\nconst Grid = ({ category }) => {\n\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      { loading && 'Cargando' }\n      <div className=\"cardGrid\">\n          {\n            data.map(image => (\n              <GifCard key={image.id} {...image} />\n            ))\n          }\n      </div>\n    </>\n    );\n};\n\nexport default Grid;\n","import React, { useState } from 'react';\n\n// Components\nimport SearchBar from '../components/searchBar';\nimport Grid from '../components/grid';\n\nconst Home = () => {\n  const [category, setCategory] = useState(['Elfen Lied']);\n\n  return(\n    <>\n    <h2>Gif Visualizer</h2>\n    <SearchBar addCategory={setCategory}/>\n    <hr/>\n    <ol>\n    {\n      category.map(cat => <Grid category={cat} key={cat}/>)\n    }\n    </ol>\n    </>\n  );\n};\n\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Home from './screens/home';\n\nReactDOM.render(\n    <Home />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}